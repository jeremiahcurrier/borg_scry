import time # for waiting for the run to finish
from openai import OpenAI # OpenAI Python SDK
import os # to read our API key from our .env file

client = OpenAI(
  api_key=os.environ['OPENAI_API_KEY'], # from .env file
)

###############
# Assistants API
###############

# 1: create Borg Scry assistant
print('\ncreating Borg Scry assistant using the OpenAI Assistants API...\n')
assistant = client.beta.assistants.create(
    name="Borg Scry",
    instructions="You are a Borg, a fictional alien species in the Star Trek franchise. You scry via a metaphorical crystal ball to seek visions, symbols, or insights.",
    model="gpt-4-1106-preview",
)
assistant_id = assistant.id
print('\ncreated assistant:\n')
print(assistant)

# 2: thread for Borg Scry to interact with
print('\ncreating thread...')
thread = client.beta.threads.create()
thread_id = thread.id

# 3: message with our question to ask Borg Scry to add to the thread we just made
print('\ncreating message...')
message = client.beta.threads.messages.create(
    thread_id=thread_id,
    role="user",
    content="What is a good prompt to help me visualize a memory about an artistic looking woman smoking a cigarette whilst sitting on a bench in a beautiful park in new york city in autumn that I could use to plug into the OpenAI DALL-E3 API?",
)

# 4: create a run to send our question to Borg Scry for it to respond
print('\ncreating run...')
run = client.beta.threads.runs.create(
    thread_id=thread_id,
    assistant_id=assistant_id,
    instructions="Please address the user as Rachel. Only reply with the exact prompt we should use in the DALL-E3 API to visualize the memory that was described. Do not include anything else in your response but the prompt we should use in our next step which is an API call to the openai DALLE-3 API.",
)

# 5: create variable to be set to the value of Borg Scry's response = will be our DALLE-3 API call image prompt
promptForDalle = ''

# 6: wait for run to complete
print("\nwaiting for run to complete to get the prompt generation from our Borg Scry assistant so we can plug that into DALLE-3 to visualize it...\n")
while True:
    run = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)

    if run.status == "completed":
        print("run completed!")
        messages = client.beta.threads.messages.list(thread_id=thread_id)

        for message in messages:
            if message.role == 'assistant':  # Check if the role is 'assistant'
              assert message.content[0].type == "text"
              # print({"role": message.role, "message": message.content[0].text.value})
              promptForDalle = message.content[0].text.value

        client.beta.assistants.delete(assistant_id)

        break
    else:
        print("run still in progress...")
        time.sleep(5)
print("\nHere is the prompt that our Borg Scry assistant thinks we should plug into DALLE-3:\n")
print(promptForDalle)

###############
# DALLE-3 API
###############

# 7: use the response generated via Borg Scry as our input to have DALL-E3 generate our visualization
print("\nSending the text generated by Borg Scry as an input to DALLE-3, please hold...\n")
image = client.images.generate(
  model="dall-e-3",
  prompt=promptForDalle, # promptForDalle from above via Borg Scry assistant conversation
  n=1,
  size="1024x1024",
  response_format="url"
)
image_url = image.data[0].url
print('\n here is the DALLE-3 image generated using the Borg Scry generated prompt as an input:\n')
print(image_url)
print('\n now copy paste the URL into the browser to see the picture :)')
